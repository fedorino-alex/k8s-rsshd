
name: Auto Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'VERSION'
      - 'k8s/deployment.yaml'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Auto-calculate version
      id: calc_version
      run: |
        # Auto-calculate based on conventional commits
        CURRENT_VERSION=$(cat VERSION 2>/dev/null || echo "0.0.0")
        # Get commits since last tag
        LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1 || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges)
        else
          COMMITS=$(git log --pretty=format:"%s" --no-merges)
        fi
        # Determine bump type
        if echo "$COMMITS" | grep -qE '^feat.*!:|^fix.*!:|BREAKING CHANGE'; then
          BUMP_TYPE="major"
        elif echo "$COMMITS" | grep -qE '^feat(\([^)]*\))?:'; then
          BUMP_TYPE="minor"
        else
          BUMP_TYPE="patch"
        fi
        # Calculate new version
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        case $BUMP_TYPE in
          major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
          minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
          patch) PATCH=$((PATCH + 1)) ;;
        esac
        VERSION="$MAJOR.$MINOR.$PATCH"
        echo "Auto-calculated version: $VERSION ($BUMP_TYPE bump)"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Validate version format
      run: |
        VERSION="${{ steps.calc_version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format. Use semantic versioning (e.g., 1.0.0 or 1.0.0-alpha)"
          exit 1
        fi

    - name: Check if tag exists
      run: |
        VERSION="${{ steps.calc_version.outputs.version }}"
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "Tag v$VERSION already exists. Skipping release."
          exit 0
        fi

    - name: Update VERSION file
      run: |
        VERSION="${{ steps.calc_version.outputs.version }}"
        echo "$VERSION" > VERSION
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add VERSION
        git commit -m "chore: release version $VERSION" || exit 0

    - name: Create and push tag
      run: |
        VERSION="${{ steps.calc_version.outputs.version }}"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"
        git push origin master

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ steps.calc_version.outputs.version }}"
        
        # Simple changelog generation - you can enhance this
        if git tag --sort=-version:refname | head -1 | grep -q "v"; then
          LAST_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          CHANGES=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
        else
          CHANGES=$(git log --pretty=format:"- %s" --no-merges)
        fi
        
        echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.calc_version.outputs.version }}
        release_name: K8s-RsshD v${{ steps.calc_version.outputs.version }}
        body: |
          ## What's Changed
          
          ${{ steps.changelog.outputs.CHANGES }}
          
          ## Docker Images
          
          ```bash
          docker pull fedorinoalex/k8s-rsshd:${{ steps.calc_version.outputs.version }}
          docker pull fedorinoalex/k8s-rsshd:latest
          ```
          
          ## Kubernetes Deployment
          
          ```bash
          kubectl apply -f https://raw.githubusercontent.com/fedorino-alex/k8s-rsshd/v${{ steps.calc_version.outputs.version }}/k8s/
          ```
        draft: false
        prerelease: false
